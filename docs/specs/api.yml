swagger: "2.0"
info:
  description: |
    The PMWEBAPI is a collection of interfaces providing Performance Co-Pilot services for web applications. It consists of APIs for web applications querying and analysing both live and historical performance data, as well as APIs used by web servers.
    The usual HTTP URL-encoded optional parameter rules apply and PMWEBAPI REST requests always follow the convention:
    ```
    /api/endpoint ? parameter1 = value1 & parameter2 = value2
    ```
    Examples in all following sections use the curl (1) command line utility with a local pmproxy (1) server listening on port 44322 (default port). The pmjson (1) utility is used to neatly format any JSON output, as opposed to the compact (minimal whitespace) form provided by default. The examples in the scalable time series section use historical data recorded by the pmlogger (1) service, in conjunction with a local redis-server (1).
  version: "1.0.0"
  title: "PMWEBAPI"
host: "localhost:44322"

tags:
- name: "OPEN METRICS"
  description: |
    Exporting of live performance metrics in an Open Metrics compatible format (as described at https://openmetrics.io and popularized by the https://prometheus.io project) is available.
- name: "SCALABLE TIME SERIES"
  description: |
   The fast, scalable time series query capabilities provided by the pmseries (1) command are also available through a REST API. These queries provide access to performance data (metric metadata and values) from multiple hosts simultaneously, and in a fashion suited to efficient retrieval by any number of web applications.
   All requests in this group can be accompanied by an optional client parameter. The value passed in the request will be sent back in the response - all responses will be in JSON object form in this case, with top level "client" and "result" fields.
- name: "FULL TEXT SEARCH"
  description: |
    The full text search capabilities provided by the pmsearch (1) command are also available through a REST API. These queries provide access to an index over performance metric names, instances, instance domains and help text, suitable for a metric search engine, and in a fashion suited to efficient querying by any number of web applications.
    In order to use this functionality, the optional RediSearch module must be loaded in the redis-server at the time pmproxy is started, such that metrics, instances and help text it discovers can be automatically indexed.
- name: "PMAPI HOST SERVICES"
  description: |
    The live performance collection facilities available from pmcd (1) can also be accessed through a REST API.
    All requests are performed on the web server host by default, unless either a hostspec or context parameter is provided. hostname can be used in place of hostspec .

    Context identifiers are used as a persistent way to refer to PMAPI contexts across related web requests. These contexts expire after a configurable period of disuse, and are either explicitly allocated using the /pmapi/context interface, or implicitly allocated using other interfaces.

    The timeout interval is configurable at context creation time, and as such the polltime parameter can be used anywhere the hostspec is specified. It sets the context timeout in terms of length of inactive time. The unit for the timeout value is seconds and the default is 5.

    To specify a specific existing context in any PMAPI web request, the endpoints can be accessed with either the context parameter or enbedded in the endpoint URL itself, such as /pmapi/[number]/fetch .
  
schemes:
- "https"
- "http"
paths:
  /metrics:
    get:
      tags:
      - "OPEN METRICS"
      summary: "Fetches current values and metadata for all metrics, or only metrics indicated by a comma-separated list of names ."
      description: |
        For all numeric metrics with the given NAME prefixes, create an Open Metrics (Prometheus) text export format giving their current value and related metadata.

        The response has plain text type rather than JSON commonly used elsewhere in the REST API. This format can be injested by many open source monitoring tools, including Prometheus and pmdaopenmetrics (1).

        The native PCP metric metadata (metric name, type, indom, semantics and units) is first output for each metric with # PCP prefix. The metadata reported is of the form described on pmTypeStr (3), pmInDomStr (3), pmSemStr (3) and pmUnitsStr (3) respectively. If the pmUnitsStr (3) units string is empty, then none is output. The units metadata string may contain spaces and extends to the end of the line.

        PCP metric names are mapped so that the . separators are exchanged with _ (':' in back-compatibility mode, where "# PCP" is the identifying line suffix). Both metric labels and instances are represented as Prometheus labels, with external instance names being quoted and the flattened PCP metric hierarchy being presented with each value.
        ```
        $ curl -s http://localhost:44322/metrics?\names=proc.nprocs,kernel.pernode.cpu.intr,filesys.blocksize
        ```
        
      consumes:
      - "pmjson"
      produces:
      - "pmjson"
      parameters:
      - name: "names"
        in: "query"
        description: "Comma-separated list of metric names"
        type: "string"
      - name: "times"
        in: "query"
        description: "Append sample times (milliseconds since epoch)"
        type: "boolean"
      responses:
          "200":
            description: |
              ```
              $ curl -s http://localhost:44322/metrics?\names=proc.nprocs,kernel.pernode.cpu.intr,filesys.blocksize
              \# PCP5 proc.nprocs 3.8.99 u32 PM_INDOM_NULL instant none 
              \# HELP proc_nprocs instantaneous number of processes
              \# TYPE proc_nprocs gauge
              proc_nprocs {hostname="app1"} 7
              \# PCP5 kernel.pernode.cpu.intr 60.0.66 u64 60.19 counter millisec
              \# HELP kernel_pernode_cpu_intr total interrupt CPU [...]
              \# TYPE kernel_pernode_cpu_intr counter
              kernel_pernode_cpu_intr{hostname="app1",instname="node0"} 25603
              \# PCP5 filesys.blocksize 60.5.9 u32 60.5 instant byte
              \# HELP filesys_blocksize Size of each block on mounted file[...]
              \# TYPE filesys_blocksize gauge
              filesys_blocksize{hostname="app1",instname="/dev/sda1"} 4096
              filesys_blocksize{hostname="app1",instname="/dev/sda2"} 4096
              ```
          
  /series/query:
    get:
      tags:
      - "SCALABLE TIME SERIES"
      summary: "Performs a time series query for either matching identifiers, or matching identifiers with series of time-stamped values."
      description: |
        The query is in the format described in pmseries (1) and is passed to the server via either the expr parameter (HTTP GET) or via the message body (HTTP POST).
        When querying for time series matches only, no time window options are specified and matching series identifiers are returned in a JSON array.
        ```
        $ curl -s http://localhost:44322/series/query?\expr=disk.dev.read* | pmjson
        ```
        When querying for time series values as well, a time window must be specified as part of the query string. The simplest form is to just request the most recent sample.
        ```
        $ curl -s http://localhost:44322/series/query?\expr=disk.dev.read*[samples:1] | pmjson
        ```
      operationId: "get/series/query"
      consumes:
      - "pmjson"
      produces:
      - "pmjson"
      parameters:
      - name: "expr"
        in: "query"
        description: "Query string in pmseries (1) format"
        required: false
        type: "string"
      - name: "client"
        in: "query"
        description: "Request identifier sent back with response"
        required: false
        type: "string"
      responses:
        "200":
          description: "$ curl -s http://localhost:44322/series/query?\expr=disk.dev.read* | pmjson"
          schema:
            type: array
            items:
              type: string
            example: ["9d8c7fb51ce160eb82e3669aac74ba675dfa8900",
                      "ddff1bfe286a3b18cebcbadc1678a68a964fbe9d",
                      "605fc77742cd0317597291329561ac4e50c0dd12"]
        "405":
          description: |
           $ curl -s http://localhost:44322/series/query?\expr=disk.dev.read*[samples:1] | pmjson
          schema:
            type: array
            items:
              type: object
              properties:
                series:
                  type: string
                instance:
                  type: string
                timestamp:
                  type: integer
                value:
                  type: string
            example:
              - series: 9d8c7fb51ce160eb82e3669aac74ba675dfa8900
                instance: c3795d8b757506a2901c6b08b489ba56cae7f0d4
                timestamp: 1547483646.2147431
                value: 12499
              - series: ddff1bfe286a3b18cebcbadc1678a68a964fbe9d
                instance: 6b08b489ba56cae7f0d4c3795d8b757506a2901c
                timestamp: 1547485701.7431218
                value: 1118623
              - series: 605fc77742cd0317597291329561ac4e50c0dd12
                instance: c3795d8b757506a2901c6b08b489ba56cae7f0d4
                timestamp: 1547483646.2147431
                value: 71661
  /series/values:
    get:
      tags:
      - "SCALABLE TIME SERIES"
      summary: "Performs values retrievals for one or more time series identifiers."
      description: |
        Performs values retrievals for one or more time series identifiers. The JSON response contains the same information as the pmseries - q /-- query option using any of the time window parameters described on pmseries (1). If no time window parameters are specified, the single most recent value observed is retrieved.
        ```
        $ curl -s http://localhost:44322/series/values?\series=605fc77742cd0317597291329561ac4e50c0dd12 | pmjson
        ```
      operationId: "get/series/values"
      consumes:
      - "pmjson"
      produces:
      - "pmjson"
      parameters:
      - name: "series"
        in: "query"
        description: "Comma-separated list of series identifiers"
        type: "string"
      - name: "client"
        in: "query"
        description: "Request identifier sent back with response"
        type: "string"
      - name: "samples"
        in: "query"
        description: "Count of samples to return"
        type: "number"
      - name: "interval"
        in: "query"
        description: "Time between successive samples"
        type: "string"
      - name: "start"
        in: "query"
        description: "Sample window start time"
        type: "string"
      - name: "finish"
        in: "query"
        description: "Sample window end time"
        type: "string"
      - name: "offset"
        in: "query"
        description: "Sample window offset"
        type: "string"
      - name: "align"
        in: "query"
        description: "Sample time alignment"
        type: "string"
      - name: "zone"
        in: "query"
        description: "Time window timezone"
        type: "string"
      responses:
        "200":
          description: |
           ```
           $ curl -s http://localhost:44322/series/values?\series=605fc77742cd0317597291329561ac4e50c0dd12 | pmjson
           ```
          schema:
            type: array
            items:
              type: object
              properties:
                series:
                  type: string
                timestamp:
                  type: integer
                value:
                  type: string
            example:
              - series: 605fc77742cd0317597291329561ac4e50c0dd12,
                timestamp: 1317633022959.959241041,
                value: 71660

  /series/descs:
    get:
      tags:
      - "SCALABLE TIME SERIES"
      summary: "Performs a descriptor lookup for one or more time series identifiers."
      description: |
        The JSON response contains the same information as the pmseries - d /-- desc option.
        ```
        $ curl -s http://localhost:44322/series/descs?\series=605fc77742cd0317597291329561ac4e50c0dd12 | pmjson
        ```
      operationId: "get/series/descs"
      consumes:
      - "pmjson"
      produces:
      - "pmjson"
      parameters:
      - name: "series"
        in: "query"
        description: "Comma-separated list of series identifiers"
        type: "string"
      - name: "client"
        in: "query"
        description: "Request identifier sent back with response"
        type: "string"
      responses:
        "200":
          description: |
           ```
            $ curl -s http://localhost:44322/series/descs?\series=605fc77742cd0317597291329561ac4e50c0dd12 | pmjson
           ```
          schema:
              type: object
              properties:
                series:
                  type: string
                source:
                  type: integer
                pmid:
                  type: string
                indom:
                  type: string
                semantics:
                  type: integer
                type:
                  type: string
                units:
                  type: string
              example:
              - series: 605fc77742cd0317597291329561ac4e50c0dd12
                source: f5ca7481da8c038325d15612bb1c6473ce1ef16f
                pmid: 60.0.4
                indom: 60.1
                semantics: counter
                type: u32
                units: count
  /series/labels:
    get:
      tags:
      - "SCALABLE TIME SERIES"
      summary: "This command operates in one of three modes. It can perform a label set lookup for one or more time series identifiers, when given the series parameter). It can produce a list of all known label names, in the absense of name , names or series parameters. The JSON responses for these modes contains the same information as the pmseries - l /-- labels option."
      description: |
        Alternatively, it can produce a list of all known label values for a given label name or names . The JSON response for this mode contains the same information as the pmseries - v /-- values option.
        ```
        $ curl -s http://localhost:44322/series/labels?\series=605fc77742cd0317597291329561ac4e50c0dd12 | pmjson
        ```
        Alternatively, with no name , names or series parameters, return the list of all known label names.
        ```
        $ curl -s http://localhost:44322/series/labels | pmjson
        ```
        Use the name or names parameters to find all possible label values for the given name(s).
        ```
        $ curl -s http://localhost:44322/series/labels?\names=hostname,domainname | pmjson
        ```
      operationId: "get/series/labels"
      consumes:
      - "pmjson"
      produces:
      - "pmjson"
      parameters:
      - name: "series"
        in: "query"
        description: "Comma-separated list of series identifiers"
        type: "string"
      - name: "match"
        in: "query"
        description: "Glob pattern string to match on all labels"
        type: "string"
      - name: "name"
        in: "query"
        description: "Find all known label values for given name"
        type: "string"
      - name: "names"
        in: "query"
        description: "Comma-separated list of label names"
        type: "string"
      - name: "client"
        in: "query"
        description: "Request identifier sent back with response"
        type: "string"
      responses:
        "200":
          description: |
           ```
            $ curl -s http://localhost:44322/series/labels?\series=605fc77742cd0317597291329561ac4e50c0dd12 | pmjson
           ```
          schema:
                example:
                - series: 605fc77742cd0317597291329561ac4e50c0dd12
                  labels:
                    agent: linux
                    domainname: acme.com
                    groupid: 1000
                    hostname: www.acme.com
                    latitude: -25.28496
                    longitude: 152.87886
                    machineid: 295b16e3b6074cc8bdbda8bf96f6930a
                    platform: dev
                    userid: 1000
        "201":
          description: |
           ```
           Alternatively, with no name , names or series parameters, return the list of all known label names.
           ```
          schema:
            example: ["agent",
                      "appversion",
                      "domainname",
                      "groupid",
                      "hostname",
                      "jobid",
                      "latitude",
                      "longitude",
                      "machineid",
                      "platform",
                      "userid"]
        "202":
          description: |
           ```
           $ curl -s http://localhost:44322/series/labels?\names=hostname,domainname | pmjson
           ```
          schema:
            example:
              hostname: [ "app", "nas" ]
              domainname: [ "acme.com" ]
          

              
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
